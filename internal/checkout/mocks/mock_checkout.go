// Code generated by MockGen. DO NOT EDIT.
// Source: checkout.go

// Package mock_checkout is a generated GoMock package.
package mock_checkout

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckout is a mock of Checkout interface.
type MockCheckout struct {
	ctrl     *gomock.Controller
	recorder *MockCheckoutMockRecorder
}

// MockCheckoutMockRecorder is the mock recorder for MockCheckout.
type MockCheckoutMockRecorder struct {
	mock *MockCheckout
}

// NewMockCheckout creates a new mock instance.
func NewMockCheckout(ctrl *gomock.Controller) *MockCheckout {
	mock := &MockCheckout{ctrl: ctrl}
	mock.recorder = &MockCheckoutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckout) EXPECT() *MockCheckoutMockRecorder {
	return m.recorder
}

// GetTotalPrice mocks base method.
func (m *MockCheckout) GetTotalPrice() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPrice")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTotalPrice indicates an expected call of GetTotalPrice.
func (mr *MockCheckoutMockRecorder) GetTotalPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPrice", reflect.TypeOf((*MockCheckout)(nil).GetTotalPrice))
}

// Scan mocks base method.
func (m *MockCheckout) Scan(itemSku string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", itemSku)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockCheckoutMockRecorder) Scan(itemSku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockCheckout)(nil).Scan), itemSku)
}
